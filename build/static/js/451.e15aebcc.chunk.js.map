{"version":3,"file":"static/js/451.e15aebcc.chunk.js","mappings":"6ZAkCA,MA6OA,EA7OiDA,IAM1C,IAN2C,GAChDC,EAAE,OACFC,EAAM,UACNC,EAAS,SACTC,EAAQ,UACRC,GACDL,EACC,MAAOM,IAAaC,EAAAA,EAAAA,OACbC,IAAgBC,EAAAA,EAAAA,OAChBC,EAAcC,IAAmBC,EAAAA,EAAAA,WAAS,IAC1CC,EAAUC,IAAeF,EAAAA,EAAAA,UAAgB,KACzCG,EAAeC,IAAoBJ,EAAAA,EAAAA,UAAgB,KACnDK,EAAYC,IAAiBN,EAAAA,EAAAA,UAAS,KACtCO,EAAWC,IAAgBR,EAAAA,EAAAA,WAAS,IACpCS,EAAcC,IAAmBV,EAAAA,EAAAA,WAAS,GAC3CW,GAAaC,EAAAA,EAAAA,QAAuB,OAE1CC,EAAAA,EAAAA,YAAU,KACUC,WAChBN,GAAa,GACb,IACE,MAAMO,QAAaC,EAAAA,EAAAA,MACnBd,EAAYa,GACZX,EAAiBW,EACnB,CAAE,MAAOE,IACPC,EAAAA,EAAAA,IACEC,EAAAA,EAAAA,MAAA,QAAMC,UAAU,4BAA2BC,SAAA,EACzCC,EAAAA,EAAAA,KAACC,EAAAA,EAAI,CAACC,KAAK,QAAQC,KAAK,KAAKL,UAAU,UACvCE,EAAAA,EAAAA,KAAA,QAAAD,SAAM,4BAER,0BAEJ,CAAC,QACCb,GAAa,EACf,GAGFkB,EAAW,GACV,KAEHb,EAAAA,EAAAA,YAAU,KAINT,EAHGC,EAIDJ,EAAS0B,QAAQC,IAAI,IAAAC,EAAA,OACN,QADMA,EACnBD,EAAKE,gBAAQ,IAAAD,OAAA,EAAbA,EAAeE,cAAcC,SAAS3B,EAAW0B,cAAc,IAJlD9B,EAOnB,GACC,CAACI,EAAYJ,KAEhBY,EAAAA,EAAAA,YAAU,KACR,MAAMoB,EAAsBC,IAExBvB,EAAWwB,UACVxB,EAAWwB,QAAQC,SAASF,EAAMG,SAEnC3B,GAAgB,EAClB,EAIF,OADA4B,SAASC,iBAAiB,YAAaN,GAChC,KACLK,SAASE,oBAAoB,YAAaP,EAAmB,CAC9D,GACA,IAEH,MAAMQ,GAASC,EAAAA,EAAAA,IAAU,CACvBC,cAAe,CACbC,YAAoB,OAARpD,QAAQ,IAARA,OAAQ,EAARA,EAAUoD,aAAc,GACpCC,YAAoB,OAARrD,QAAQ,IAARA,OAAQ,EAARA,EAAUqD,aAAc,SACpCC,aAAqB,OAARtD,QAAQ,IAARA,OAAQ,EAARA,EAAUsD,cAAe,GACtCC,SAAiB,OAARvD,QAAQ,IAARA,OAAQ,EAARA,EAAUuD,UAAW,IAEhCC,iBAAkBC,EAAAA,GAAW,CAC3BL,WAAYK,EAAAA,KACTC,SAAS,2BACTC,IAAI,EAAG,6CACVN,WAAYI,EAAAA,KACTC,SAAS,0BACTE,MAAM,CAAC,SAAU,WAAY,6BAChCN,YAAaG,EAAAA,KAAaE,IAAI,EAAG,6CACjCJ,QAASE,EAAAA,KAAaC,SAAS,uBAEjCG,oBAAoB,EACpBC,SAAUxC,UACRf,GAAgB,GAChB,IACc,OAARP,QAAQ,IAARA,GAAAA,EAAU+D,UACN3D,EAAa,CAAEP,GAAIG,EAAS+D,IAAKC,KAAMC,IAAUC,eAEjDhE,EAAU+D,GAAQC,UAG1BxC,EAAAA,EAAAA,IACEC,EAAAA,EAAAA,MAAA,QAAMC,UAAU,4BAA2BC,SAAA,EACzCC,EAAAA,EAAAA,KAACC,EAAAA,EAAI,CAACC,KAAK,cAAcC,KAAK,KAAKL,UAAU,UAC7CE,EAAAA,EAAAA,KAAA,QAAAD,SAAO7B,EAAW,iBAAmB,oBAEvC,GAAGiE,EAAOb,uBAAuBpD,EAAW,UAAY,yBAG1DiD,EAAOkB,YACPpE,GAAU,GACD,OAATE,QAAS,IAATA,GAAAA,GACF,CAAE,MAAOwB,GACP2C,QAAQ3C,MAAMA,IACdC,EAAAA,EAAAA,IACEC,EAAAA,EAAAA,MAAA,QAAMC,UAAU,4BAA2BC,SAAA,EACzCC,EAAAA,EAAAA,KAACC,EAAAA,EAAI,CAACC,KAAK,QAAQC,KAAK,KAAKL,UAAU,UACvCE,EAAAA,EAAAA,KAAA,QAAAD,SAAM,aAER,aAAa7B,EAAW,SAAW,kCAEvC,CAAC,QACCO,GAAgB,EAClB,KAIJ,OAAKT,GAGH6B,EAAAA,EAAAA,MAAC0C,EAAAA,GAAK,CAACvE,OAAQA,EAAQC,UAAWA,EAAWkC,KAAK,KAAKqC,QAASzE,EAAI0E,kBAAgB,EAACC,YAAU,EAAA3C,SAAA,EAC7FC,EAAAA,EAAAA,KAAC2C,EAAAA,GAAW,CAAC1E,UAAWA,EAAW6B,UAAU,MAAKC,UAChDC,EAAAA,EAAAA,KAAC4C,EAAAA,GAAU,CAAC7E,GAAIA,EAAGgC,SAAE7B,EAAW,cAAgB,sBAElD2B,EAAAA,EAAAA,MAACgD,EAAAA,GAAS,CAAC/C,UAAU,OAAMC,SAAA,EAEzBC,EAAAA,EAAAA,KAAC8C,EAAAA,EAAS,CAAC/E,GAAG,aAAagF,MAAM,cAAcjD,UAAU,OAAMC,UAC7DC,EAAAA,EAAAA,KAACgD,EAAAA,EAAK,CACJjF,GAAG,aACHkF,KAAK,aACLC,YAAY,oBACZC,SAAUhC,EAAOiC,aACjBC,OAAQlC,EAAOmC,WACfC,MAAOpC,EAAOgB,OAAOb,WACrBkC,YAAarC,EAAOsC,QAAQnC,WAC5BoC,SAAUvC,EAAOwC,OAAOrC,WACxBsC,gBAAiBzC,EAAOwC,OAAOrC,gBAKnCtB,EAAAA,EAAAA,KAAC8C,EAAAA,EAAS,CAAC/E,GAAG,cAAcgF,MAAM,cAAcjD,UAAU,OAAMC,UAC9DC,EAAAA,EAAAA,KAACgD,EAAAA,EAAK,CACJjF,GAAG,cACHkF,KAAK,cACLC,YAAY,oBACZC,SAAUhC,EAAOiC,aACjBC,OAAQlC,EAAOmC,WACfC,MAAOpC,EAAOgB,OAAOX,YACrBgC,YAAarC,EAAOsC,QAAQjC,YAC5BkC,SAAUvC,EAAOwC,OAAOnC,YACxBoC,gBAAiBzC,EAAOwC,OAAOnC,iBAKnCxB,EAAAA,EAAAA,KAAC8C,EAAAA,EAAS,CAAC/E,GAAG,aAAagF,MAAM,aAAajD,UAAU,OAAMC,UAC5DF,EAAAA,EAAAA,MAACgE,EAAAA,EAAM,CACL9F,GAAG,aACHkF,KAAK,aACLE,SAAUhC,EAAOiC,aACjBC,OAAQlC,EAAOmC,WACfC,MAAOpC,EAAOgB,OAAOZ,WACrBiC,YAAarC,EAAOsC,QAAQlC,WAC5BmC,SAAUvC,EAAOwC,OAAOpC,WACxBqC,gBAAiBzC,EAAOwC,OAAOpC,WAC/BuC,UAAU,GAAE/D,SAAA,EAEZC,EAAAA,EAAAA,KAAC+D,EAAAA,EAAM,CAACR,MAAM,SAAQxD,SAAC,YACvBC,EAAAA,EAAAA,KAAC+D,EAAAA,EAAM,CAACR,MAAM,UAASxD,SAAC,kBAK5BC,EAAAA,EAAAA,KAAC8C,EAAAA,EAAS,CAAC/E,GAAG,UAAUgF,MAAM,yBAAyBjD,UAAU,OAAMC,UACrEF,EAAAA,EAAAA,MAAA,OAAKmE,IAAK3E,EAAWU,SAAA,EACnBC,EAAAA,EAAAA,KAACgD,EAAAA,EAAK,CACJiB,KAAK,OACLf,YAAY,iBACZgB,QAASA,IAAM9E,GAAgB,GAC/B+D,SAAWgB,IACTnF,EAAcmF,EAAEpD,OAAOwC,OACvBnE,GAAgB,GAChB+B,EAAOiD,gBAAgB,WAAW,EAAK,EAEzCb,MAAOxE,EACPe,UAAU,SAEXX,GACCa,EAAAA,EAAAA,KAAA,OAAKF,UAAU,qBAAqBuE,MAAO,CAAEC,UAAW,QAASC,UAAW,QAASxE,SAClFd,GACCe,EAAAA,EAAAA,KAAA,OAAAD,SAAK,qBACsB,IAAzBlB,EAAc2F,QAChBxE,EAAAA,EAAAA,KAAA,OAAKF,UAAU,aAAYC,SAAC,kBAE5BlB,EAAc4F,KAAKnE,IACjBN,EAAAA,EAAAA,KAAA,OAEEF,UAAW,qBACTqB,EAAOgB,OAAOV,UAAYnB,EAAK2B,IAAM,wBAA0B,kBAEjEoC,MAAO,CAAEK,OAAQ,WACjBC,QAASA,KACPxD,EAAOyD,cAAc,UAAWtE,EAAK2B,KACrCjD,EAAcsB,EAAKE,UACnBpB,GAAgB,EAAM,EACtBW,SAEDO,EAAKE,UAXDF,EAAK2B,SAgBhB,KACHd,EAAOsC,QAAQhC,SAAWN,EAAOwC,OAAOlC,UACvCzB,EAAAA,EAAAA,KAAA,OAAKF,UAAU,mBAAkBC,SAAEoB,EAAOwC,OAAOlC,mBAMzD5B,EAAAA,EAAAA,MAACgF,EAAAA,GAAW,CAAC/E,UAAU,YAAWC,SAAA,EAChCC,EAAAA,EAAAA,KAAC8E,EAAAA,EAAM,CAACC,MAAM,YAAYJ,QAASA,IAAM1G,GAAU,GAAQ6B,UAAU,OAAOkF,UAAWxG,EAAauB,SAAC,YAGrGF,EAAAA,EAAAA,MAACiF,EAAAA,EAAM,CAACC,MAAM,UAAUJ,QAASxD,EAAO8D,aAAcD,UAAWxG,EAAauB,SAAA,CAC3E7B,EAAW,gBAAkB,aAAa,IAAEM,GAAgB,eA7GjD,IAgHV,E,qCC/OZ,MAAM0G,EAA6BC,IACjC,QAAcC,IAAVD,GAAiC,OAAVA,EAAgB,MAAO,UAClD,IACE,MAAME,EAAuB,kBAAVF,EAAqBG,SAASH,EAAO,KAAO,EAAIA,EACnE,OAAOI,EAAAA,EAAAA,GAAsBC,KAAKC,IAAIJ,GAAO,GAC/C,CAAE,MACA,MAAO,SACT,GA2XF,EAxXyBK,KAAO,IAADC,EAAAC,EAC7B,MAAM,eAAEC,IAAmBC,EAAAA,EAAAA,MAEpBC,EAAaC,IAAkBtH,EAAAA,EAAAA,UAAiB,IAChDuH,EAASC,IAAcxH,EAAAA,EAAAA,UAAiByH,EAAAA,GAAU,MAClDC,IAAgBC,EAAAA,EAAAA,OAEhBC,EAAaC,IAAkB7H,EAAAA,EAAAA,WAAS,IACxC8H,EAAgBC,IAAqB/H,EAAAA,EAAAA,eAAc0G,IACnDsB,EAASC,IAAcjI,EAAAA,EAAAA,UAAS,CAAEV,QAAQ,EAAO4I,IAAK,GAAI3D,KAAM,MAGrExD,KAAMoH,EAAe,UACrB5H,EAAS,QACT6H,EAAO,QACPC,IACEC,EAAAA,EAAAA,IAAmB,CACrBC,YAAalB,EACbmB,UAAWjB,IAITkB,EAAcC,MAAMC,QAAuB,OAAfR,QAAe,IAAfA,GAAqB,QAANlB,EAAfkB,EAAiBpH,YAAI,IAAAkG,OAAN,EAAfA,EAAuBlG,MACjC,QADsCmG,EAC1DiB,EAAgBpH,YAAI,IAAAmG,OAAA,EAApBA,EAAsBnG,KAAO,GAGzB0B,GAASC,EAAAA,EAAAA,IAAU,CACvBC,cAAe,CACbiG,YAAa,GACbC,eAAgB,IAElBvF,SAAUA,SAKNwF,EAA0B,OAAXL,QAAW,IAAXA,OAAW,EAAXA,EAAa9G,QAAQoH,IAAY,IAADC,EACnD,QAAKD,KAEU,QAAZC,EAAAD,EAAEnG,kBAAU,IAAAoG,OAAA,EAAZA,EAAcjH,cAAcC,SAASS,EAAOgB,OAAOmF,YAAY7G,iBAAkB,GAAE,IAGxF6B,QAAQqF,IAAI,2BAA4BH,GACxC,MAAM,MAAEI,EAAK,YAAEC,EAAW,iBAAEC,IAAqBC,EAAAA,EAAAA,GAAgBP,GACjElF,QAAQqF,IAAI,aAAcC,GAC1B,MAAMI,EAAgBA,KACpBjB,GAAS,EAmEX,OACElH,EAAAA,EAAAA,MAACoI,EAAAA,EAAW,CAACC,MAAOC,EAAAA,GAAcC,IAAIC,QAAQC,cAAcC,KAAMzI,UAAU,OAAMC,SAAA,EAChFF,EAAAA,EAAAA,MAAC2I,EAAAA,GAAS,CAAAzI,SAAA,EACRF,EAAAA,EAAAA,MAAC4I,EAAAA,GAAa,CAAA1I,SAAA,EACZC,EAAAA,EAAAA,KAAA,SAAOF,UAAU,8CAA8C4I,QAAQ,cAAa3I,UAClFC,EAAAA,EAAAA,KAACC,EAAAA,EAAI,CAACC,KAAK,SAASC,KAAK,KAAK4E,MAAM,eAEtC/E,EAAAA,EAAAA,KAACgD,EAAAA,EAAK,CACJjF,GAAG,cACHkG,KAAK,SACLnE,UAAU,sCACVoD,YAAY,oBACZC,SAAUhC,EAAOiC,aACjBG,MAAOpC,EAAOgB,OAAOmF,kBAGzBzH,EAAAA,EAAAA,MAAC8I,EAAAA,GAAc,CAAA5I,SAAA,EACbF,EAAAA,EAAAA,MAAC+I,EAAAA,GAAQ,CAAA7I,SAAA,EACPC,EAAAA,EAAAA,KAAC6I,EAAAA,EAAc,CAACC,SAAS,EAAM/I,UAC7BC,EAAAA,EAAAA,KAAC8E,EAAAA,EAAM,CACL5E,KAAK,YACL6E,MAAM,OACNgE,SAAO,EACPjJ,UAAU,kCACV,aAAW,SAAQC,SAElBoH,EAAY3C,SAAWgD,EAAahD,SACnCxE,EAAAA,EAAAA,KAACgJ,EAAAA,EAAQ,CAACC,KAAK,oBAAoBC,QAAQ,QAAOnJ,UAChDC,EAAAA,EAAAA,KAAA,QAAMF,UAAU,4GAA2GC,UACzHC,EAAAA,EAAAA,KAAA,QAAMF,UAAU,kBAAiBC,SAAC,gCAM5CC,EAAAA,EAAAA,KAACmJ,EAAAA,GAAY,CAACC,gBAAc,EAACjJ,KAAK,KAAIJ,UACpCC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,iBAAgBC,UAC7BC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,UAASC,UACtBC,EAAAA,EAAAA,KAAC8C,EAAAA,EAAS,CAACC,MAAM,YAAYjD,UAAU,SAAQC,UAC7CC,EAAAA,EAAAA,KAACgD,EAAAA,EAAK,CACJjF,GAAG,iBACH+F,UAAU,YACVZ,YAAY,sBACZC,SAAUhC,EAAOiC,aACjBG,MAAOpC,EAAOgB,OAAOoF,6BAOjCvH,EAAAA,EAAAA,KAACqJ,EAAAA,GAAkB,KACnBrJ,EAAAA,EAAAA,KAAC8E,EAAAA,EAAM,CACL5E,KAAK,YACL6E,MAAM,UACNgE,SAAO,EACPpE,QAASA,KACP4B,GAAe,GACfE,OAAkBrB,EAAU,EAC5BrF,SACH,sBAKLC,EAAAA,EAAAA,KAACsJ,EAAAA,EAAI,CAAAvJ,UACHC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,YAAWC,UACxBC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,SAAQC,SACpB+G,GAAU9G,EAAAA,EAAAA,KAACuJ,EAAAA,EAAY,IAAMtK,GAAYe,EAAAA,EAAAA,KAACwJ,EAAAA,EAAc,KACvD3J,EAAAA,EAAAA,MAAC4J,EAAAA,GAAI,CAACC,SAAO,EAAA3J,SAAA,EACXC,EAAAA,EAAAA,KAAC2J,EAAAA,GAAQ,CAACC,cAAY,EAAC9J,UAAU,mBAAkBC,UACjDF,EAAAA,EAAAA,MAAA,SAAOC,UAAU,iCAAgCC,SAAA,EAC/CC,EAAAA,EAAAA,KAAA,SAAAD,UACEF,EAAAA,EAAAA,MAAA,MAAAE,SAAA,EACEF,EAAAA,EAAAA,MAAA,MAAIC,UAAU,6BAA6B6E,QAASA,IAAMkD,EAAY,OAAO9H,SAAA,CAAC,SACrE,KACPC,EAAAA,EAAAA,KAACC,EAAAA,EAAI,CAACE,KAAK,KAAKL,UAAWgI,EAAiB,OAAQ5H,KAAK,mBAE3DF,EAAAA,EAAAA,KAAA,MAAIF,UAAU,cAAaC,SAAC,iBAC5BC,EAAAA,EAAAA,KAAA,MAAIF,UAAU,cAAaC,SAAC,gBAC5BC,EAAAA,EAAAA,KAAA,MAAIF,UAAU,cAAaC,SAAC,mBAC5BC,EAAAA,EAAAA,KAAA,MAAIF,UAAU,cAAaC,SAAC,aAC5BC,EAAAA,EAAAA,KAAA,MAAIF,UAAU,cAAaC,SAAC,kBAGhCC,EAAAA,EAAAA,KAAA,SAAAD,UACG8J,EAAAA,EAAAA,IAAejC,EAAO7B,EAAaE,GAASxB,KAAKqF,IAChDjK,EAAAA,EAAAA,MAAA,MAAAE,SAAA,EACEC,EAAAA,EAAAA,KAAA,MAAIF,UAAU,cAAaC,UACzBC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,mDAAkDC,UAC/DC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,gBAAeC,UAC5BC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,uBAAuBuE,MAAO,CAAE0F,MAAO,IAAKhK,UACzDC,EAAAA,EAAAA,KAAA,OACEF,UAAW,OAAO+F,EAAiB,MAAQ,QAAQX,EAA2B,OAAD4E,QAAC,IAADA,OAAC,EAADA,EAAG7H,aAAaiD,EAA2B,OAAD4E,QAAC,IAADA,OAAC,EAADA,EAAG7H,kEAAkElC,UAE5LC,EAAAA,EAAAA,KAAA,QAAMF,UAAU,UAASC,UAAEiK,EAAAA,EAAAA,KAAgB,OAADF,QAAC,IAADA,OAAC,EAADA,EAAGxI,aAAc,iBAMrEtB,EAAAA,EAAAA,KAAA,MAAIF,UAAU,cAAaC,UACzBC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,eAAcC,UAAG,OAAD+J,QAAC,IAADA,OAAC,EAADA,EAAGxI,aAAc,WAElDtB,EAAAA,EAAAA,KAAA,MAAIF,UAAU,cAAaC,UACzBC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,eAAcC,UAAG,OAAD+J,QAAC,IAADA,OAAC,EAADA,EAAGvI,aAAc,WAElDvB,EAAAA,EAAAA,KAAA,MAAIF,UAAU,cAAaC,UACzBC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,eAAcC,SAAG,OAAD+J,QAAC,IAADA,GAAAA,EAAGG,QAAUH,EAAEG,QAAQzF,OAAS,WAEjExE,EAAAA,EAAAA,KAAA,MAAIF,UAAU,cAAaC,SACvB,OAAD+J,QAAC,IAADA,GAAAA,EAAGI,QACFlK,EAAAA,EAAAA,KAAA,OACEF,UAAU,gCAMX6E,QAASA,IAAMgC,EAAW,CAAE3I,QAAQ,EAAM4I,IAAK,oCAAoCkD,EAAEI,SAAUjH,KAAO,OAAD6G,QAAC,IAADA,OAAC,EAADA,EAAGxI,aAAcvB,UAErHC,EAAAA,EAAAA,KAAA,OACEqE,MAAO,CACL0F,MAAO,OACPI,OAAQ,OACRC,QAAS,OACTC,eAAgB,SAChBC,WAAY,SACZ5F,OAAQ,WACR3E,UAEFC,EAAAA,EAAAA,KAAA,OACE4G,IAAK,oCAAoCkD,EAAEI,SAC3CK,IAAI,UACJlG,MAAO,CACL0F,MAAO,OACPI,OAAQ,OACRK,UAAW,kBAMnBxK,EAAAA,EAAAA,KAAA,OAAKF,UAAU,kBAAiBC,SAAC,aAGrCC,EAAAA,EAAAA,KAAA,MAAIF,UAAU,cAAaC,UACzBF,EAAAA,EAAAA,MAAC+I,EAAAA,GAAQ,CAAA7I,SAAA,EACPC,EAAAA,EAAAA,KAAC6I,EAAAA,EAAc,CAACC,SAAS,EAAM/I,UAC7BC,EAAAA,EAAAA,KAAC8E,EAAAA,EAAM,CACL5E,KAAK,YACL6E,MAAM,OACNgE,SAAO,EACP0B,OAAO,KACP,aAAW,oBAGf5K,EAAAA,EAAAA,MAACsJ,EAAAA,GAAY,CAACC,gBAAc,EAAArJ,SAAA,EAC1BC,EAAAA,EAAAA,KAAC0K,EAAAA,GAAY,CAAA3K,UACXC,EAAAA,EAAAA,KAAC8E,EAAAA,EAAM,CACL5E,KAAK,QACLyE,QAASA,IAAMgC,EAAW,CAAE3I,QAAQ,EAAM4I,IAAK,oCAAoCkD,EAAEI,SAAUjH,KAAO,OAAD6G,QAAC,IAADA,OAAC,EAADA,EAAGxI,aAAcvB,SACvH,gBAIHC,EAAAA,EAAAA,KAAC0K,EAAAA,GAAY,CAAA3K,UACXC,EAAAA,EAAAA,KAAC8E,EAAAA,EAAM,CACL5E,KAAK,OACLyE,QAASA,KACP8B,EAAkBqD,GAClBvD,GAAe,EAAK,EACpBxG,SACH,YAIHC,EAAAA,EAAAA,KAAC0K,EAAAA,GAAY,CAAA3K,UACXC,EAAAA,EAAAA,KAAC8E,EAAAA,EAAM,CACL5E,KAAK,SACLyE,QAASA,IApPtBnF,WACnB,GAAKzB,GAED4M,OAAOC,QAAQ,gDACjB,UACQxE,EAAarI,GAAIqE,SACvB4F,KACApI,EAAAA,EAAAA,IACEC,EAAAA,EAAAA,MAAA,QAAMC,UAAU,4BAA2BC,SAAA,EACzCC,EAAAA,EAAAA,KAACC,EAAAA,EAAI,CAACC,KAAK,cAAcC,KAAK,KAAKL,UAAU,UAC7CE,EAAAA,EAAAA,KAAA,QAAAD,SAAM,sBAER,wCAEJ,CAAE,MAAOJ,GACP2C,QAAQ3C,MAAM,2BAA4BA,IAC1CC,EAAAA,EAAAA,IACEC,EAAAA,EAAAA,MAAA,QAAMC,UAAU,4BAA2BC,SAAA,EACzCC,EAAAA,EAAAA,KAACC,EAAAA,EAAI,CAACC,KAAK,QAAQC,KAAK,KAAKL,UAAU,UACvCE,EAAAA,EAAAA,KAAA,QAAAD,SAAM,aAER,6CAEJ,CACF,EA4N+C8K,CAAc,OAADf,QAAC,IAADA,OAAC,EAADA,EAAG7H,KAAKlC,SACrC,wBA9FD,OAAD+J,QAAC,IAADA,OAAC,EAADA,EAAG7H,MAAOuD,KAAKsF,oBA0GhC9K,EAAAA,EAAAA,KAAC+K,EAAAA,GAAiB,CAChBtL,KAAM+H,EACNzE,MAAM,UACNiD,eAAgBA,EAChBD,YAAaA,EACbE,QAASA,EACTC,WAAYA,cA2CxBlG,EAAAA,EAAAA,KAACgL,EAAAA,EAAe,CACdhN,OAAQ0I,EAAQ1I,OAChBC,UAAWA,IAAM0I,EAAW,IAAKD,EAAS1I,QAAQ,EAAO4I,IAAK,GAAI3D,KAAM,KACxEgI,SAAUvE,EAAQzD,KAClBiI,MAAOxE,EAAQE,OAGjB5G,EAAAA,EAAAA,KAACmL,EAAc,CACbpN,GAAG,eACHC,OAAQsI,EACRrI,UAAWA,KACTsI,GAAe,GACfE,OAAkBrB,EAAU,EAE9BlH,SAAUsI,EACVrI,UAAW6J,MAED,C","sources":["pages/Kindy-project/Thred/ThredAdd.tsx","pages/Kindy-project/Thred/Thred.tsx"],"sourcesContent":["import React, { FC, useEffect, useRef, useState } from 'react';\r\nimport { useFormik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport Modal, { ModalBody, ModalFooter, ModalHeader, ModalTitle } from '../../../components/bootstrap/Modal';\r\nimport showNotification from '../../../components/extras/showNotification';\r\nimport Icon from '../../../components/icon/Icon';\r\nimport FormGroup from '../../../components/bootstrap/forms/FormGroup';\r\nimport Input from '../../../components/bootstrap/forms/Input';\r\nimport Button from '../../../components/bootstrap/Button';\r\nimport Select from '../../../components/bootstrap/forms/Select';\r\nimport Option from '../../../components/bootstrap/Option';\r\n\r\nimport {\r\n  useAddThreadMutation,\r\n  useUpdateThreadMutation,\r\n} from '../../../redux/api/thredApi';\r\nimport { fetchUsers } from '../../../redux/api/userApi';\r\n\r\ninterface IThread {\r\n  _id?: string;\r\n  threadName: string;\r\n  visibility: 'public' | 'private';\r\n  description?: string;\r\n  ownerId?: string;\r\n}\r\n\r\ninterface IThreadAddModalProps {\r\n  id: string;\r\n  isOpen: boolean;\r\n  editItem?: IThread;\r\n  setIsOpen: (isOpen: boolean) => void;\r\n  onSuccess?: () => void;\r\n}\r\n\r\nconst ThreadAddModal: FC<IThreadAddModalProps> = ({\r\n  id,\r\n  isOpen,\r\n  setIsOpen,\r\n  editItem,\r\n  onSuccess,\r\n}) => {\r\n  const [addThread] = useAddThreadMutation();\r\n  const [updateThread] = useUpdateThreadMutation();\r\n  const [isSubmitting, setIsSubmitting] = useState(false);\r\n  const [allUsers, setAllUsers] = useState<any[]>([]);\r\n  const [filteredUsers, setFilteredUsers] = useState<any[]>([]);\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [showUserList, setShowUserList] = useState(false);\r\n  const userBoxRef = useRef<HTMLDivElement>(null);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      setIsLoading(true);\r\n      try {\r\n        const data = await fetchUsers();\r\n        setAllUsers(data);\r\n        setFilteredUsers(data);\r\n      } catch (error) {\r\n        showNotification(\r\n          <span className=\"d-flex align-items-center\">\r\n            <Icon icon=\"Error\" size=\"lg\" className=\"me-1\" />\r\n            <span>Failed to load users</span>\r\n          </span>,\r\n          'Please try again later.'\r\n        );\r\n      } finally {\r\n        setIsLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (!searchTerm) {\r\n      setFilteredUsers(allUsers);\r\n    } else {\r\n      setFilteredUsers(\r\n        allUsers.filter((user) =>\r\n          user.fullName?.toLowerCase().includes(searchTerm.toLowerCase())\r\n        )\r\n      );\r\n    }\r\n  }, [searchTerm, allUsers]);\r\n\r\n  useEffect(() => {\r\n    const handleClickOutside = (event: MouseEvent) => {\r\n      if (\r\n        userBoxRef.current &&\r\n        !userBoxRef.current.contains(event.target as Node)\r\n      ) {\r\n        setShowUserList(false);\r\n      }\r\n    };\r\n\r\n    document.addEventListener('mousedown', handleClickOutside);\r\n    return () => {\r\n      document.removeEventListener('mousedown', handleClickOutside);\r\n    };\r\n  }, []);\r\n\r\n  const formik = useFormik({\r\n    initialValues: {\r\n      threadName: editItem?.threadName || '',\r\n      visibility: editItem?.visibility || 'Public',\r\n      description: editItem?.description || '',\r\n      ownerId: editItem?.ownerId || '',\r\n    },\r\n    validationSchema: Yup.object({\r\n      threadName: Yup.string()\r\n        .required('Thread name is required')\r\n        .min(3, 'Thread name must be at least 3 characters'),\r\n      visibility: Yup.string()\r\n        .required('Visibility is required')\r\n        .oneOf(['Public', 'Private'], 'Invalid visibility option'),\r\n      description: Yup.string().min(5, 'Description must be at least 5 characters'),\r\n      ownerId: Yup.string().required('Owner is required'),\r\n    }),\r\n    enableReinitialize: true,\r\n    onSubmit: async (values) => {\r\n      setIsSubmitting(true);\r\n      try {\r\n        if (editItem?._id) {\r\n          await updateThread({ id: editItem._id, body: values }).unwrap();\r\n        } else {\r\n          await addThread(values).unwrap();\r\n        }\r\n\r\n        showNotification(\r\n          <span className=\"d-flex align-items-center\">\r\n            <Icon icon=\"CheckCircle\" size=\"lg\" className=\"me-1\" />\r\n            <span>{editItem ? 'Thread Updated' : 'Thread Added'}</span>\r\n          </span>,\r\n          `${values.threadName} has been ${editItem ? 'updated' : 'added'} successfully.`\r\n        );\r\n\r\n        formik.resetForm();\r\n        setIsOpen(false);\r\n        onSuccess?.();\r\n      } catch (error) {\r\n        console.error(error);\r\n        showNotification(\r\n          <span className=\"d-flex align-items-center\">\r\n            <Icon icon=\"Error\" size=\"lg\" className=\"me-1\" />\r\n            <span>Error</span>\r\n          </span>,\r\n          `Failed to ${editItem ? 'update' : 'add'} thread. Please try again.`\r\n        );\r\n      } finally {\r\n        setIsSubmitting(false);\r\n      }\r\n    },\r\n  });\r\n\r\n  if (!isOpen) return null;\r\n\r\n  return (\r\n    <Modal isOpen={isOpen} setIsOpen={setIsOpen} size=\"md\" titleId={id} isStaticBackdrop isCentered>\r\n      <ModalHeader setIsOpen={setIsOpen} className=\"p-4\">\r\n        <ModalTitle id={id}>{editItem ? 'Edit Thread' : 'Add New Thread'}</ModalTitle>\r\n      </ModalHeader>\r\n      <ModalBody className=\"px-4\">\r\n        {/* Thread Name */}\r\n        <FormGroup id=\"threadName\" label=\"Thread Name\" className=\"mb-3\">\r\n          <Input\r\n            id=\"threadName\"\r\n            name=\"threadName\"\r\n            placeholder=\"Enter thread name\"\r\n            onChange={formik.handleChange}\r\n            onBlur={formik.handleBlur}\r\n            value={formik.values.threadName}\r\n            isTouched={!!formik.touched.threadName}\r\n            isValid={!formik.errors.threadName}\r\n            invalidFeedback={formik.errors.threadName}\r\n          />\r\n        </FormGroup>\r\n\r\n        {/* Description */}\r\n        <FormGroup id=\"description\" label=\"Description\" className=\"mb-3\">\r\n          <Input\r\n            id=\"description\"\r\n            name=\"description\"\r\n            placeholder=\"Enter description\"\r\n            onChange={formik.handleChange}\r\n            onBlur={formik.handleBlur}\r\n            value={formik.values.description}\r\n            isTouched={!!formik.touched.description}\r\n            isValid={!formik.errors.description}\r\n            invalidFeedback={formik.errors.description}\r\n          />\r\n        </FormGroup>\r\n\r\n        {/* Visibility */}\r\n        <FormGroup id=\"visibility\" label=\"Visibility\" className=\"mb-3\">\r\n          <Select\r\n            id=\"visibility\"\r\n            name=\"visibility\"\r\n            onChange={formik.handleChange}\r\n            onBlur={formik.handleBlur}\r\n            value={formik.values.visibility}\r\n            isTouched={!!formik.touched.visibility}\r\n            isValid={!formik.errors.visibility}\r\n            invalidFeedback={formik.errors.visibility}\r\n            ariaLabel=\"\"\r\n          >\r\n            <Option value=\"Public\">Public</Option>\r\n            <Option value=\"Private\">Private</Option>\r\n          </Select>\r\n        </FormGroup>\r\n\r\n        {/* Owner Selection with Click-to-Show List */}\r\n        <FormGroup id=\"ownerId\" label=\"Owner (search by name)\" className=\"mb-3\">\r\n          <div ref={userBoxRef}>\r\n            <Input\r\n              type=\"text\"\r\n              placeholder=\"Search user...\"\r\n              onFocus={() => setShowUserList(true)}\r\n              onChange={(e : any) => {\r\n                setSearchTerm(e.target.value);\r\n                setShowUserList(true);\r\n                formik.setFieldTouched('ownerId', true);\r\n              }}\r\n              value={searchTerm}\r\n              className=\"mb-2\"\r\n            />\r\n            {showUserList ? (\r\n              <div className=\"border rounded p-2\" style={{ maxHeight: '200px', overflowY: 'auto' }}>\r\n                {isLoading ? (\r\n                  <div>Loading users...</div>\r\n                ) : filteredUsers.length === 0 ? (\r\n                  <div className=\"text-muted\">No user found</div>\r\n                ) : (\r\n                  filteredUsers.map((user) => (\r\n                    <div\r\n                      key={user._id}\r\n                      className={`p-2 rounded mb-1 ${\r\n                        formik.values.ownerId === user._id ? 'bg-primary text-white' : 'hover:bg-light'\r\n                      }`}\r\n                      style={{ cursor: 'pointer' }}\r\n                      onClick={() => {\r\n                        formik.setFieldValue('ownerId', user._id);\r\n                        setSearchTerm(user.fullName);\r\n                        setShowUserList(false);\r\n                      }}\r\n                    >\r\n                      {user.fullName}\r\n                    </div>\r\n                  ))\r\n                )}\r\n              </div>\r\n            ) : null}\r\n            {formik.touched.ownerId && formik.errors.ownerId && (\r\n              <div className=\"text-danger mt-1\">{formik.errors.ownerId}</div>\r\n            )}\r\n          </div>\r\n        </FormGroup>\r\n      </ModalBody>\r\n\r\n      <ModalFooter className=\"px-4 pb-4\">\r\n        <Button color=\"secondary\" onClick={() => setIsOpen(false)} className=\"me-2\" isDisable={isSubmitting}>\r\n          Cancel\r\n        </Button>\r\n        <Button color=\"primary\" onClick={formik.handleSubmit} isDisable={isSubmitting}>\r\n          {editItem ? 'Update Thread' : 'Add Thread'} {isSubmitting && '...'}\r\n        </Button>\r\n      </ModalFooter>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default ThreadAddModal;\r\n","import React, { useState } from 'react';\r\nimport { useFormik } from 'formik';\r\nimport PageWrapper from '../../../layout/PageWrapper/PageWrapper';\r\nimport SubHeader, { SubHeaderLeft, SubHeaderRight, SubheaderSeparator } from '../../../layout/SubHeader/SubHeader';\r\nimport Page from '../../../layout/Page/Page';\r\nimport { demoPagesMenu } from '../../../menu';\r\nimport Card, { CardBody } from '../../../components/bootstrap/Card';\r\nimport { getFirstLetter } from '../../../helpers/helpers';\r\nimport PaginationButtons, { dataPagination, PER_COUNT } from '../../../components/PaginationButtons';\r\nimport Button from '../../../components/bootstrap/Button';\r\nimport Icon from '../../../components/icon/Icon';\r\nimport Input from '../../../components/bootstrap/forms/Input';\r\nimport Dropdown, { DropdownItem, DropdownMenu, DropdownToggle } from '../../../components/bootstrap/Dropdown';\r\nimport FormGroup from '../../../components/bootstrap/forms/FormGroup';\r\nimport useSortableData from '../../../hooks/useSortableData';\r\nimport InputGroup, { InputGroupText } from '../../../components/bootstrap/forms/InputGroup';\r\nimport Popovers from '../../../components/bootstrap/Popovers';\r\nimport { getColorNameWithIndex } from '../../../common/data/enumColors';\r\nimport useDarkMode from '../../../hooks/useDarkMode';\r\nimport ThreadAddModal from './ThredAdd';\r\nimport { useGetThreadsQuery, useDeleteThreadMutation } from '../../../redux/api/thredApi';\r\nimport showNotification from '../../../components/extras/showNotification';\r\nimport Modal, { ModalBody, ModalHeader } from '../../../components/bootstrap/Modal';\r\nimport { error } from 'console';\r\nimport ErrorWrapper from '../other/onError';\r\nimport LoadingWrapper from '../other/onLoading';\r\nimport QrTemplateModal from '../../kindy-components/QrTemplateModal';\r\n\r\nconst safeGetColorNameWithIndex = (index?: string | number) => {\r\n  if (index === undefined || index === null) return 'primary';\r\n  try {\r\n    const num = typeof index === 'string' ? parseInt(index, 10) || 0 : index;\r\n    return getColorNameWithIndex(Math.abs(num) % 20);\r\n  } catch {\r\n    return 'primary';\r\n  }\r\n};\r\n\r\nconst ThreadManagement = () => {\r\n  const { darkModeStatus } = useDarkMode();\r\n\r\n  const [currentPage, setCurrentPage] = useState<number>(1);\r\n  const [perPage, setPerPage] = useState<number>(PER_COUNT['10']);\r\n  const [deleteThread] = useDeleteThreadMutation();\r\n  // const [qrModal, setQrModal] = useState({ isOpen: false, src: '', threadName: '' });\r\n  const [isModalOpen, setIsModalOpen] = useState(false);\r\n  const [selectedThread, setSelectedThread] = useState<any>(undefined);\r\n  const [qrModal, setQrModal] = useState({ isOpen: false, src: '', name: '' });\r\n\r\n  const {\r\n    data: threadsResponse,\r\n    isLoading,\r\n    isError,\r\n    refetch\r\n  } = useGetThreadsQuery({\r\n    page_number: currentPage,\r\n    page_size: perPage,\r\n  });\r\n\r\n  // const threadsData = threadsResponse?.data || [];\r\nconst threadsData = Array.isArray(threadsResponse?.data?.data)\r\n  ? threadsResponse.data?.data : [];\r\n\r\n\r\n  const formik = useFormik({\r\n    initialValues: {\r\n      searchInput: '',\r\n      threadIdFilter: '',\r\n    },\r\n    onSubmit: () => {\r\n      // Filter logic is handled in the filteredData calculation\r\n    },\r\n  });\r\n\r\n  const filteredData = threadsData?.filter((f: any) => {\r\n    if (!f) return false;\r\n    return (\r\n      (f.threadName?.toLowerCase().includes(formik.values.searchInput.toLowerCase()) || '')\r\n    );\r\n  });\r\n  console.log('filteredDatafilteredData', filteredData)\r\n  const { items, requestSort, getClassNamesFor } = useSortableData(filteredData);\r\n  console.log('itemsitems', items)\r\n  const handleSuccess = () => {\r\n    refetch();\r\n  };\r\n\r\n  const handleDelete = async (id?: string) => {\r\n    if (!id) return;\r\n\r\n    if (window.confirm('Are you sure you want to delete this thread?')) {\r\n      try {\r\n        await deleteThread(id).unwrap();\r\n        handleSuccess();\r\n        showNotification(\r\n          <span className='d-flex align-items-center'>\r\n            <Icon icon='CheckCircle' size='lg' className='me-1' />\r\n            <span>Thread Deleted</span>\r\n          </span>,\r\n          'Thread has been deleted successfully.',\r\n        );\r\n      } catch (error) {\r\n        console.error('Failed to delete thread:', error);\r\n        showNotification(\r\n          <span className='d-flex align-items-center'>\r\n            <Icon icon='Error' size='lg' className='me-1' />\r\n            <span>Error</span>\r\n          </span>,\r\n          'Failed to delete thread. Please try again.',\r\n        );\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleDownloadQR = (src: string, threadName: string) => {\r\n    const link = document.createElement('a');\r\n    link.href = src;\r\n    link.download = `QR_${threadName || 'Thread'}.png`;\r\n    document.body.appendChild(link);\r\n    link.click();\r\n    document.body.removeChild(link);\r\n  };\r\n\r\n  const handlePrintQR = (src: string, threadName: string) => {\r\n    const printWindow = window.open('', '_blank');\r\n    if (printWindow) {\r\n      printWindow.document.write(`\r\n        <html>\r\n          <head>\r\n            <title>Print QR Code - ${threadName}</title>\r\n            <style>\r\n              body { text-align: center; padding: 20px; }\r\n              img { max-width: 100%; height: auto; margin: 20px 0; }\r\n              h1 { margin-bottom: 10px; }\r\n            </style>\r\n          </head>\r\n          <body>\r\n            <h1>${threadName}</h1>\r\n            <img src=\"${src}\" alt=\"QR Code\" />\r\n            <p>Scan this QR code to access the thread</p>\r\n            <script>\r\n              setTimeout(function() { window.print(); window.close(); }, 100);\r\n            </script>\r\n          </body>\r\n        </html>\r\n      `);\r\n      printWindow.document.close();\r\n    }\r\n  };\r\n\r\n\r\n  return (\r\n    <PageWrapper title={demoPagesMenu.crm.subMenu.customersList.text} className='mt-3'>\r\n      <SubHeader>\r\n        <SubHeaderLeft>\r\n          <label className='border-0 bg-transparent cursor-pointer me-0' htmlFor='searchInput'>\r\n            <Icon icon='Search' size='2x' color='primary' />\r\n          </label>\r\n          <Input\r\n            id='searchInput'\r\n            type='search'\r\n            className='border-0 shadow-none bg-transparent'\r\n            placeholder='Search threads...'\r\n            onChange={formik.handleChange}\r\n            value={formik.values.searchInput}\r\n          />\r\n        </SubHeaderLeft>\r\n        <SubHeaderRight>\r\n          <Dropdown>\r\n            <DropdownToggle hasIcon={false}>\r\n              <Button\r\n                icon='FilterAlt'\r\n                color='dark'\r\n                isLight\r\n                className='btn-only-icon position-relative'\r\n                aria-label='Filter'\r\n              >\r\n                {threadsData.length !== filteredData.length && (\r\n                  <Popovers desc='Filtering applied' trigger='hover'>\r\n                    <span className='position-absolute top-0 start-100 translate-middle badge border border-light rounded-circle bg-danger p-2'>\r\n                      <span className='visually-hidden'>there is filtering</span>\r\n                    </span>\r\n                  </Popovers>\r\n                )}\r\n              </Button>\r\n            </DropdownToggle>\r\n            <DropdownMenu isAlignmentEnd size='lg'>\r\n              <div className='container py-2'>\r\n                <div className='row g-3'>\r\n                  <FormGroup label='Thread ID' className='col-12'>\r\n                    <Input\r\n                      id='threadIdFilter'\r\n                      ariaLabel='Thread ID'\r\n                      placeholder='Filter by Thread ID'\r\n                      onChange={formik.handleChange}\r\n                      value={formik.values.threadIdFilter}\r\n                    />\r\n                  </FormGroup>\r\n                </div>\r\n              </div>\r\n            </DropdownMenu>\r\n          </Dropdown>\r\n          <SubheaderSeparator />\r\n          <Button\r\n            icon='PersonAdd'\r\n            color='primary'\r\n            isLight\r\n            onClick={() => {\r\n              setIsModalOpen(true);\r\n              setSelectedThread(undefined);\r\n            }}\r\n          >\r\n            New Thread\r\n          </Button>\r\n        </SubHeaderRight>\r\n      </SubHeader>\r\n      <Page>\r\n        <div className='row h-100'>\r\n          <div className='col-12'>\r\n            {isError ? <ErrorWrapper /> : isLoading ? <LoadingWrapper /> : (\r\n              <Card stretch>\r\n                <CardBody isScrollable className='table-responsive'>\r\n                  <table className='table table-modern table-hover'>\r\n                    <thead>\r\n                      <tr>\r\n                        <th className='text-center cursor-pointer' onClick={() => requestSort('_id')}>\r\n                          Thread{' '}\r\n                          <Icon size='lg' className={getClassNamesFor('_id')} icon='FilterList' />\r\n                        </th>\r\n                        <th className='text-center'>Thread Name</th>\r\n                        <th className='text-center'>Visibility</th>\r\n                        <th className='text-center'>Total Members</th>\r\n                        <th className='text-center'>QR Code</th>\r\n                        <th className='text-center'>Actions</th>\r\n                      </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                      {dataPagination(items, currentPage, perPage).map((i) => (\r\n                        <tr key={i?._id || Math.random()}>\r\n                          <td className='text-center'>\r\n                            <div className='d-flex align-items-center justify-content-center'>\r\n                              <div className='flex-shrink-0'>\r\n                                <div className='ratio ratio-1x1 me-3' style={{ width: 48 }}>\r\n                                  <div\r\n                                    className={`bg-l${darkModeStatus ? 'o25' : '25'}-${safeGetColorNameWithIndex(i?._id)} text-${safeGetColorNameWithIndex(i?._id)} rounded-2 d-flex align-items-center justify-content-center`}\r\n                                  >\r\n                                    <span className='fw-bold'>{getFirstLetter(i?.threadName || '')}</span>\r\n                                  </div>\r\n                                </div>\r\n                              </div>\r\n                            </div>\r\n                          </td>\r\n                          <td className='text-center'>\r\n                            <div className='fs-6 fw-bold'>{i?.threadName || 'N/A'}</div>\r\n                          </td>\r\n                          <td className='text-center'>\r\n                            <div className='fs-6 fw-bold'>{i?.visibility || 'N/A'}</div>\r\n                          </td>\r\n                          <td className='text-center'>\r\n                            <div className='fs-6 fw-bold'>{i?.members ? i.members.length : 'N/A'}</div>\r\n                          </td>\r\n                          <td className='text-center'>\r\n                            {i?.qrCode ? (\r\n                              <div\r\n                                className=\"d-flex justify-content-center\"\r\n                              // onClick={() => setQrModal({\r\n                              //   isOpen: true,\r\n                              //   src: `${process.env.REACT_APP_API_URL}/${i.qrCode}`,\r\n                              //   threadName: i.threadName\r\n                              // })}\r\n                               onClick={() => setQrModal({ isOpen: true, src: `${process.env.REACT_APP_API_URL}/${i.qrCode}`, name: i?.threadName })}\r\n                              >\r\n                                <div\r\n                                  style={{\r\n                                    width: '50px',\r\n                                    height: '50px',\r\n                                    display: 'flex',\r\n                                    justifyContent: 'center',\r\n                                    alignItems: 'center',\r\n                                    cursor: 'pointer',\r\n                                  }}\r\n                                >\r\n                                  <img\r\n                                    src={`${process.env.REACT_APP_API_URL}/${i.qrCode}`}\r\n                                    alt=\"QR Code\"\r\n                                    style={{\r\n                                      width: '100%',\r\n                                      height: '100%',\r\n                                      objectFit: 'contain',\r\n                                    }}\r\n                                  />\r\n                                </div>\r\n                              </div>\r\n                            ) : (\r\n                              <div className='fs-6 text-muted'>No QR</div>\r\n                            )}\r\n                          </td>\r\n                          <td className='text-center'>\r\n                            <Dropdown>\r\n                              <DropdownToggle hasIcon={false}>\r\n                                <Button\r\n                                  icon='MoreHoriz'\r\n                                  color='dark'\r\n                                  isLight\r\n                                  shadow='sm'\r\n                                  aria-label='More actions'\r\n                                />\r\n                              </DropdownToggle>\r\n                              <DropdownMenu isAlignmentEnd>\r\n                                <DropdownItem>\r\n                                  <Button\r\n                                    icon='Print'\r\n                                    onClick={() => setQrModal({ isOpen: true, src: `${process.env.REACT_APP_API_URL}/${i.qrCode}`, name: i?.threadName })}\r\n                                  >\r\n                                    Print QR\r\n                                  </Button>\r\n                                </DropdownItem>\r\n                                <DropdownItem>\r\n                                  <Button\r\n                                    icon='Edit'\r\n                                    onClick={() => {\r\n                                      setSelectedThread(i);\r\n                                      setIsModalOpen(true);\r\n                                    }}\r\n                                  >\r\n                                    Edit\r\n                                  </Button>\r\n                                </DropdownItem>\r\n                                <DropdownItem>\r\n                                  <Button\r\n                                    icon='Delete'\r\n                                    onClick={() => handleDelete(i?._id)}\r\n                                  >\r\n                                    Delete\r\n                                  </Button>\r\n                                </DropdownItem>\r\n                              </DropdownMenu>\r\n                            </Dropdown>\r\n                          </td>\r\n                        </tr>\r\n                      ))}\r\n                    </tbody>\r\n                  </table>\r\n                </CardBody>\r\n                <PaginationButtons\r\n                  data={filteredData}\r\n                  label='threads'\r\n                  setCurrentPage={setCurrentPage}\r\n                  currentPage={currentPage}\r\n                  perPage={perPage}\r\n                  setPerPage={setPerPage}\r\n                />\r\n              </Card>\r\n\r\n            )}\r\n          </div>\r\n        </div>\r\n      </Page>\r\n\r\n      {/* QR Code Modal */}\r\n      {/* <Modal\r\n        isOpen={qrModal.isOpen}\r\n        setIsOpen={() => setQrModal({ isOpen: false, src: '', threadName: '' })}\r\n        titleId='qr-modal'\r\n        isCentered\r\n        isScrollable\r\n        size='md'\r\n      >\r\n        <ModalHeader setIsOpen={() => setQrModal({ isOpen: false, src: '', threadName: '' })}>\r\n          QR Code - {qrModal.threadName}\r\n        </ModalHeader>\r\n        <ModalBody>\r\n          <div className='text-center mb-3'>\r\n            <img\r\n              src={qrModal.src}\r\n              alt=\"Full Size QR Code\"\r\n              style={{ width: '100%', height: 'auto', maxWidth: '300px' }}\r\n            />\r\n          </div>\r\n          <div className='d-flex justify-content-center gap-3'>\r\n           \r\n            <Button\r\n              className='w-full'\r\n              color='info'\r\n              icon='Print'\r\n              onClick={() => handlePrintQR(qrModal.src, qrModal.threadName)}\r\n            >\r\n              Print\r\n            </Button>\r\n          </div>\r\n        </ModalBody>\r\n      </Modal> */}\r\n\r\n      <QrTemplateModal\r\n        isOpen={qrModal.isOpen}\r\n        setIsOpen={() => setQrModal({ ...qrModal, isOpen: false, src: '', name: '' })}\r\n        beadName={qrModal.name}\r\n        qrUrl={qrModal.src}\r\n      />\r\n\r\n      <ThreadAddModal\r\n        id=\"thread-modal\"\r\n        isOpen={isModalOpen}\r\n        setIsOpen={() => {\r\n          setIsModalOpen(false)\r\n          setSelectedThread(undefined);\r\n        }}\r\n        editItem={selectedThread}\r\n        onSuccess={handleSuccess}\r\n      />\r\n    </PageWrapper>\r\n  );\r\n};\r\n\r\nexport default ThreadManagement;"],"names":["_ref","id","isOpen","setIsOpen","editItem","onSuccess","addThread","useAddThreadMutation","updateThread","useUpdateThreadMutation","isSubmitting","setIsSubmitting","useState","allUsers","setAllUsers","filteredUsers","setFilteredUsers","searchTerm","setSearchTerm","isLoading","setIsLoading","showUserList","setShowUserList","userBoxRef","useRef","useEffect","async","data","fetchUsers","error","showNotification","_jsxs","className","children","_jsx","Icon","icon","size","fetchData","filter","user","_user$fullName","fullName","toLowerCase","includes","handleClickOutside","event","current","contains","target","document","addEventListener","removeEventListener","formik","useFormik","initialValues","threadName","visibility","description","ownerId","validationSchema","Yup","required","min","oneOf","enableReinitialize","onSubmit","_id","body","values","unwrap","resetForm","console","Modal","titleId","isStaticBackdrop","isCentered","ModalHeader","ModalTitle","ModalBody","FormGroup","label","Input","name","placeholder","onChange","handleChange","onBlur","handleBlur","value","isTouched","touched","isValid","errors","invalidFeedback","Select","ariaLabel","Option","ref","type","onFocus","e","setFieldTouched","style","maxHeight","overflowY","length","map","cursor","onClick","setFieldValue","ModalFooter","Button","color","isDisable","handleSubmit","safeGetColorNameWithIndex","index","undefined","num","parseInt","getColorNameWithIndex","Math","abs","ThreadManagement","_threadsResponse$data","_threadsResponse$data2","darkModeStatus","useDarkMode","currentPage","setCurrentPage","perPage","setPerPage","PER_COUNT","deleteThread","useDeleteThreadMutation","isModalOpen","setIsModalOpen","selectedThread","setSelectedThread","qrModal","setQrModal","src","threadsResponse","isError","refetch","useGetThreadsQuery","page_number","page_size","threadsData","Array","isArray","searchInput","threadIdFilter","filteredData","f","_f$threadName","log","items","requestSort","getClassNamesFor","useSortableData","handleSuccess","PageWrapper","title","demoPagesMenu","crm","subMenu","customersList","text","SubHeader","SubHeaderLeft","htmlFor","SubHeaderRight","Dropdown","DropdownToggle","hasIcon","isLight","Popovers","desc","trigger","DropdownMenu","isAlignmentEnd","SubheaderSeparator","Page","ErrorWrapper","LoadingWrapper","Card","stretch","CardBody","isScrollable","dataPagination","i","width","getFirstLetter","members","qrCode","height","display","justifyContent","alignItems","alt","objectFit","shadow","DropdownItem","window","confirm","handleDelete","random","PaginationButtons","QrTemplateModal","beadName","qrUrl","ThreadAddModal"],"sourceRoot":""}